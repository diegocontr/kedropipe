[build-system]
requires = [ "setuptools",]
build-backend = "setuptools.build_meta"

[project]
requires-python = ">=3.9"
name = "modelcreation"
readme = "README.md"
dynamic = [ "version",]
dependencies = [ 
    "ipython>=8.10", 
    "jupyterlab>=3.0", 
    "notebook", 
    "kedro~=1.0.0",
    "numpy",
    "pandas",
    "matplotlib",
    "seaborn",
    "scipy",
    "plotly",
    "scikit-learn",
    "catboost",
    "mlflow>=2.8.0",
    "setuptools<81.0.0",  # Pin to avoid pkg_resources deprecation warnings
]

[project.scripts]
modelcreation = "modelcreation.__main__:main"

[tool.kedro]
package_name = "modelcreation"
project_name = "modelcreation"
kedro_init_version = "1.0.0"
tools = "['Data Structure']"
example_pipeline = "False"
source_dir = "src"

[project.entry-points."kedro.hooks"]

[tool.setuptools.dynamic.version]
attr = "modelcreation.__version__"

[tool.setuptools.packages.find]
where = [ "src",]
namespaces = false


[project.optional-dependencies]
dev = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.15",
    "mkdocstrings-python>=1.16.12",
    "pytest",
    "ruff>=0.11.11",
    "pre-commit>=3.0.0",
]
[tool.ruff]
line-length = 88
exclude = ["notebooks_dev"]

[tool.ruff.lint]
# Ignore Rules to ignore. In this example these are all docstring (D) related rules.
ignore = [
    "C901",  # too complex 
    "D100",  # Missing docstring in public module
    "D102",   # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D417", # Missing argument descriptions in the docstring
    "D205",  # 1 blank line required between summary and description
    "D415",  # First line should end with a period, question mark or exclamation point.
    "E501",  # Line too long (this is commonly ignored for print statements, but E501 is generic line length)
    "N803",  # Argument name "X_eval" should be lowercase (N is for pep8-naming)
    "N806",  # Variable 'X_val' in function should be lowercase (N is for pep8-naming)
    "E402",  # Import at the top (E is for pycodestyle; E482 is not a standard ruff rule code that I can find easily, E402 is common for imports not at top)
    "PD901", # Avoid using the generic variable name 'df' for DataFrames (PD is for pandas-vet)
    "S307",  # Use of possibly insecure function; consider using 'ast.literal_eval' (S is for bandit)
    "F841",  # Local variable 'child_run' is assigned to but never used (F is for flakes)
    "S608",  # Possible SQL injection vector through string-based query construction (S is for bandit)
    "N805",  # First argument of a method should be named 'self' (N is for pep8-naming).
    "S101",  # Use of assert detected (S is for bandit)
    "PD010", # .pivot_table` is preferred to `.pivot` or `.unstack`; provides same functionality

]

# select Sets of rules to check for
select = [
    "B",   # bugbear
    "C4",  # comprehensions (This often refers to flake8-comprehensions, which uses C4xx codes)
    "C90", # mccabe (flake8-mccabe uses C901 for complexity)
    "D",   # docstrings (pydocstyle)
    "E",   # pycodestyle errors
    "F",   # flakes
    "S",   # bandit
    "N",   # pep8-naming
    "RUF", # ruff-specific rules
    "I",   # isort
    "PD",  # pandas-vet
    # "W" could be added for pycodestyle warnings, but it's not explicitly in the 'select' list.
]

[tool.ruff.lint.pydocstyle]
convention = "google"
